//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: BookkeeperProtocol.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// Protocol Versions.
type ProtocolVersion int32

const (
	ProtocolVersion_VERSION_ONE   ProtocolVersion = 1
	ProtocolVersion_VERSION_TWO   ProtocolVersion = 2
	ProtocolVersion_VERSION_THREE ProtocolVersion = 3
)

// Enum value maps for ProtocolVersion.
var (
	ProtocolVersion_name = map[int32]string{
		1: "VERSION_ONE",
		2: "VERSION_TWO",
		3: "VERSION_THREE",
	}
	ProtocolVersion_value = map[string]int32{
		"VERSION_ONE":   1,
		"VERSION_TWO":   2,
		"VERSION_THREE": 3,
	}
)

func (x ProtocolVersion) Enum() *ProtocolVersion {
	p := new(ProtocolVersion)
	*p = x
	return p
}

func (x ProtocolVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_BookkeeperProtocol_proto_enumTypes[0].Descriptor()
}

func (ProtocolVersion) Type() protoreflect.EnumType {
	return &file_BookkeeperProtocol_proto_enumTypes[0]
}

func (x ProtocolVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtocolVersion) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtocolVersion(num)
	return nil
}

// Deprecated: Use ProtocolVersion.Descriptor instead.
func (ProtocolVersion) EnumDescriptor() ([]byte, []int) {
	return file_BookkeeperProtocol_proto_rawDescGZIP(), []int{0}
}

//*
// Status codes.
type StatusCode int32

const (
	StatusCode_EOK StatusCode = 0
	// Server side Errors 4xx
	StatusCode_ENOLEDGER StatusCode = 402
	StatusCode_ENOENTRY  StatusCode = 403
	StatusCode_EBADREQ   StatusCode = 404
	// IO/access errors 5xx
	StatusCode_EIO                 StatusCode = 501
	StatusCode_EUA                 StatusCode = 502
	StatusCode_EBADVERSION         StatusCode = 503
	StatusCode_EFENCED             StatusCode = 504
	StatusCode_EREADONLY           StatusCode = 505
	StatusCode_ETOOMANYREQUESTS    StatusCode = 506
	StatusCode_EUNKNOWNLEDGERSTATE StatusCode = 507
)

// Enum value maps for StatusCode.
var (
	StatusCode_name = map[int32]string{
		0:   "EOK",
		402: "ENOLEDGER",
		403: "ENOENTRY",
		404: "EBADREQ",
		501: "EIO",
		502: "EUA",
		503: "EBADVERSION",
		504: "EFENCED",
		505: "EREADONLY",
		506: "ETOOMANYREQUESTS",
		507: "EUNKNOWNLEDGERSTATE",
	}
	StatusCode_value = map[string]int32{
		"EOK":                 0,
		"ENOLEDGER":           402,
		"ENOENTRY":            403,
		"EBADREQ":             404,
		"EIO":                 501,
		"EUA":                 502,
		"EBADVERSION":         503,
		"EFENCED":             504,
		"EREADONLY":           505,
		"ETOOMANYREQUESTS":    506,
		"EUNKNOWNLEDGERSTATE": 507,
	}
)

func (x StatusCode) Enum() *StatusCode {
	p := new(StatusCode)
	*p = x
	return p
}

func (x StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_BookkeeperProtocol_proto_enumTypes[1].Descriptor()
}

func (StatusCode) Type() protoreflect.EnumType {
	return &file_BookkeeperProtocol_proto_enumTypes[1]
}

func (x StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StatusCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StatusCode(num)
	return nil
}

// Deprecated: Use StatusCode.Descriptor instead.
func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_BookkeeperProtocol_proto_rawDescGZIP(), []int{1}
}

//*
// Supported operations by this protocol.
type OperationType int32

const (
	OperationType_READ_ENTRY OperationType = 1
	OperationType_ADD_ENTRY  OperationType = 2
	// Not supported yet.
	OperationType_RANGE_READ_ENTRY              OperationType = 3
	OperationType_RANGE_ADD_ENTRY               OperationType = 4
	OperationType_AUTH                          OperationType = 5
	OperationType_WRITE_LAC                     OperationType = 6
	OperationType_READ_LAC                      OperationType = 7
	OperationType_GET_BOOKIE_INFO               OperationType = 8
	OperationType_START_TLS                     OperationType = 9
	OperationType_FORCE_LEDGER                  OperationType = 10
	OperationType_GET_LIST_OF_ENTRIES_OF_LEDGER OperationType = 11
)

// Enum value maps for OperationType.
var (
	OperationType_name = map[int32]string{
		1:  "READ_ENTRY",
		2:  "ADD_ENTRY",
		3:  "RANGE_READ_ENTRY",
		4:  "RANGE_ADD_ENTRY",
		5:  "AUTH",
		6:  "WRITE_LAC",
		7:  "READ_LAC",
		8:  "GET_BOOKIE_INFO",
		9:  "START_TLS",
		10: "FORCE_LEDGER",
		11: "GET_LIST_OF_ENTRIES_OF_LEDGER",
	}
	OperationType_value = map[string]int32{
		"READ_ENTRY":                    1,
		"ADD_ENTRY":                     2,
		"RANGE_READ_ENTRY":              3,
		"RANGE_ADD_ENTRY":               4,
		"AUTH":                          5,
		"WRITE_LAC":                     6,
		"READ_LAC":                      7,
		"GET_BOOKIE_INFO":               8,
		"START_TLS":                     9,
		"FORCE_LEDGER":                  10,
		"GET_LIST_OF_ENTRIES_OF_LEDGER": 11,
	}
)

func (x OperationType) Enum() *OperationType {
	p := new(OperationType)
	*p = x
	return p
}

func (x OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_BookkeeperProtocol_proto_enumTypes[2].Descriptor()
}

func (OperationType) Type() protoreflect.EnumType {
	return &file_BookkeeperProtocol_proto_enumTypes[2]
}

func (x OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OperationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OperationType(num)
	return nil
}

// Deprecated: Use OperationType.Descriptor instead.
func (OperationType) EnumDescriptor() ([]byte, []int) {
	return file_BookkeeperProtocol_proto_rawDescGZIP(), []int{2}
}

type ReadRequest_Flag int32

const (
	ReadRequest_FENCE_LEDGER    ReadRequest_Flag = 1
	ReadRequest_ENTRY_PIGGYBACK ReadRequest_Flag = 2
)

// Enum value maps for ReadRequest_Flag.
var (
	ReadRequest_Flag_name = map[int32]string{
		1: "FENCE_LEDGER",
		2: "ENTRY_PIGGYBACK",
	}
	ReadRequest_Flag_value = map[string]int32{
		"FENCE_LEDGER":    1,
		"ENTRY_PIGGYBACK": 2,
	}
)

func (x ReadRequest_Flag) Enum() *ReadRequest_Flag {
	p := new(ReadRequest_Flag)
	*p = x
	return p
}

func (x ReadRequest_Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReadRequest_Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_BookkeeperProtocol_proto_enumTypes[3].Descriptor()
}

func (ReadRequest_Flag) Type() protoreflect.EnumType {
	return &file_BookkeeperProtocol_proto_enumTypes[3]
}

func (x ReadRequest_Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ReadRequest_Flag) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ReadRequest_Flag(num)
	return nil
}

// Deprecated: Use ReadRequest_Flag.Descriptor instead.
func (ReadRequest_Flag) EnumDescriptor() ([]byte, []int) {
	return file_BookkeeperProtocol_proto_rawDescGZIP(), []int{3, 0}
}

type AddRequest_Flag int32

const (
	AddRequest_RECOVERY_ADD AddRequest_Flag = 1
)

// Enum value maps for AddRequest_Flag.
var (
	AddRequest_Flag_name = map[int32]string{
		1: "RECOVERY_ADD",
	}
	AddRequest_Flag_value = map[string]int32{
		"RECOVERY_ADD": 1,
	}
)

func (x AddRequest_Flag) Enum() *AddRequest_Flag {
	p := new(AddRequest_Flag)
	*p = x
	return p
}

func (x AddRequest_Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddRequest_Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_BookkeeperProtocol_proto_enumTypes[4].Descriptor()
}

func (AddRequest_Flag) Type() protoreflect.EnumType {
	return &file_BookkeeperProtocol_proto_enumTypes[4]
}

func (x AddRequest_Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AddRequest_Flag) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AddRequest_Flag(num)
	return nil
}

// Deprecated: Use AddRequest_Flag.Descriptor instead.
func (AddRequest_Flag) EnumDescriptor() ([]byte, []int) {
	return file_BookkeeperProtocol_proto_rawDescGZIP(), []int{4, 0}
}

type GetBookieInfoRequest_Flags int32

const (
	GetBookieInfoRequest_TOTAL_DISK_CAPACITY GetBookieInfoRequest_Flags = 1
	GetBookieInfoRequest_FREE_DISK_SPACE     GetBookieInfoRequest_Flags = 2
)

// Enum value maps for GetBookieInfoRequest_Flags.
var (
	GetBookieInfoRequest_Flags_name = map[int32]string{
		1: "TOTAL_DISK_CAPACITY",
		2: "FREE_DISK_SPACE",
	}
	GetBookieInfoRequest_Flags_value = map[string]int32{
		"TOTAL_DISK_CAPACITY": 1,
		"FREE_DISK_SPACE":     2,
	}
)

func (x GetBookieInfoRequest_Flags) Enum() *GetBookieInfoRequest_Flags {
	p := new(GetBookieInfoRequest_Flags)
	*p = x
	return p
}

func (x GetBookieInfoRequest_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetBookieInfoRequest_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_BookkeeperProtocol_proto_enumTypes[5].Descriptor()
}

func (GetBookieInfoRequest_Flags) Type() protoreflect.EnumType {
	return &file_BookkeeperProtocol_proto_enumTypes[5]
}

func (x GetBookieInfoRequest_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetBookieInfoRequest_Flags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetBookieInfoRequest_Flags(num)
	return nil
}

// Deprecated: Use GetBookieInfoRequest_Flags.Descriptor instead.
func (GetBookieInfoRequest_Flags) EnumDescriptor() ([]byte, []int) {
	return file_BookkeeperProtocol_proto_rawDescGZIP(), []int{9, 0}
}

//*
// Packet header for all requests.
type BKPacketHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   *ProtocolVersion `protobuf:"varint,1,req,name=version,enum=ProtocolVersion" json:"version,omitempty"`
	Operation *OperationType   `protobuf:"varint,2,req,name=operation,enum=OperationType" json:"operation,omitempty"`
	TxnId     *uint64          `protobuf:"varint,3,req,name=txnId" json:"txnId,omitempty"`
	Priority  *uint32          `protobuf:"varint,4,opt,name=priority,def=0" json:"priority,omitempty"`
}

// Default values for BKPacketHeader fields.
const (
	Default_BKPacketHeader_Priority = uint32(0)
)

func (x *BKPacketHeader) Reset() {
	*x = BKPacketHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BookkeeperProtocol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BKPacketHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BKPacketHeader) ProtoMessage() {}

func (x *BKPacketHeader) ProtoReflect() protoreflect.Message {
	mi := &file_BookkeeperProtocol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BKPacketHeader.ProtoReflect.Descriptor instead.
func (*BKPacketHeader) Descriptor() ([]byte, []int) {
	return file_BookkeeperProtocol_proto_rawDescGZIP(), []int{0}
}

func (x *BKPacketHeader) GetVersion() ProtocolVersion {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ProtocolVersion_VERSION_ONE
}

func (x *BKPacketHeader) GetOperation() OperationType {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return OperationType_READ_ENTRY
}

func (x *BKPacketHeader) GetTxnId() uint64 {
	if x != nil && x.TxnId != nil {
		return *x.TxnId
	}
	return 0
}

func (x *BKPacketHeader) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return Default_BKPacketHeader_Priority
}

type ContextPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (x *ContextPair) Reset() {
	*x = ContextPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BookkeeperProtocol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextPair) ProtoMessage() {}

func (x *ContextPair) ProtoReflect() protoreflect.Message {
	mi := &file_BookkeeperProtocol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextPair.ProtoReflect.Descriptor instead.
func (*ContextPair) Descriptor() ([]byte, []int) {
	return file_BookkeeperProtocol_proto_rawDescGZIP(), []int{1}
}

func (x *ContextPair) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *ContextPair) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *BKPacketHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	// Requests
	ReadRequest                     *ReadRequest                     `protobuf:"bytes,100,opt,name=readRequest" json:"readRequest,omitempty"`
	AddRequest                      *AddRequest                      `protobuf:"bytes,101,opt,name=addRequest" json:"addRequest,omitempty"`
	AuthRequest                     *AuthMessage                     `protobuf:"bytes,102,opt,name=authRequest" json:"authRequest,omitempty"`
	WriteLacRequest                 *WriteLacRequest                 `protobuf:"bytes,103,opt,name=writeLacRequest" json:"writeLacRequest,omitempty"`
	ReadLacRequest                  *ReadLacRequest                  `protobuf:"bytes,104,opt,name=readLacRequest" json:"readLacRequest,omitempty"`
	GetBookieInfoRequest            *GetBookieInfoRequest            `protobuf:"bytes,105,opt,name=getBookieInfoRequest" json:"getBookieInfoRequest,omitempty"`
	StartTLSRequest                 *StartTLSRequest                 `protobuf:"bytes,106,opt,name=startTLSRequest" json:"startTLSRequest,omitempty"`
	ForceLedgerRequest              *ForceLedgerRequest              `protobuf:"bytes,107,opt,name=forceLedgerRequest" json:"forceLedgerRequest,omitempty"`
	GetListOfEntriesOfLedgerRequest *GetListOfEntriesOfLedgerRequest `protobuf:"bytes,108,opt,name=getListOfEntriesOfLedgerRequest" json:"getListOfEntriesOfLedgerRequest,omitempty"`
	// to pass MDC context
	RequestContext []*ContextPair `protobuf:"bytes,200,rep,name=requestContext" json:"requestContext,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BookkeeperProtocol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_BookkeeperProtocol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_BookkeeperProtocol_proto_rawDescGZIP(), []int{2}
}

func (x *Request) GetHeader() *BKPacketHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Request) GetReadRequest() *ReadRequest {
	if x != nil {
		return x.ReadRequest
	}
	return nil
}

func (x *Request) GetAddRequest() *AddRequest {
	if x != nil {
		return x.AddRequest
	}
	return nil
}

func (x *Request) GetAuthRequest() *AuthMessage {
	if x != nil {
		return x.AuthRequest
	}
	return nil
}

func (x *Request) GetWriteLacRequest() *WriteLacRequest {
	if x != nil {
		return x.WriteLacRequest
	}
	return nil
}

func (x *Request) GetReadLacRequest() *ReadLacRequest {
	if x != nil {
		return x.ReadLacRequest
	}
	return nil
}

func (x *Request) GetGetBookieInfoRequest() *GetBookieInfoRequest {
	if x != nil {
		return x.GetBookieInfoRequest
	}
	return nil
}

func (x *Request) GetStartTLSRequest() *StartTLSRequest {
	if x != nil {
		return x.StartTLSRequest
	}
	return nil
}

func (x *Request) GetForceLedgerRequest() *ForceLedgerRequest {
	if x != nil {
		return x.ForceLedgerRequest
	}
	return nil
}

func (x *Request) GetGetListOfEntriesOfLedgerRequest() *GetListOfEntriesOfLedgerRequest {
	if x != nil {
		return x.GetListOfEntriesOfLedgerRequest
	}
	return nil
}

func (x *Request) GetRequestContext() []*ContextPair {
	if x != nil {
		return x.RequestContext
	}
	return nil
}

type ReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag     *ReadRequest_Flag `protobuf:"varint,100,opt,name=flag,enum=ReadRequest_Flag" json:"flag,omitempty"`
	LedgerId *int64            `protobuf:"varint,1,req,name=ledgerId" json:"ledgerId,omitempty"`
	// entryId will be -1 for reading the LAST_ADD_CONFIRMED entry.
	EntryId *int64 `protobuf:"varint,2,req,name=entryId" json:"entryId,omitempty"`
	// Used while fencing a ledger.
	MasterKey []byte `protobuf:"bytes,3,opt,name=masterKey" json:"masterKey,omitempty"`
	// Used for waiting on last add confirmed update
	PreviousLAC *int64 `protobuf:"varint,4,opt,name=previousLAC" json:"previousLAC,omitempty"`
	// Used as a timeout (in milliseconds) for the long polling request
	TimeOut *int64 `protobuf:"varint,5,opt,name=timeOut" json:"timeOut,omitempty"`
}

func (x *ReadRequest) Reset() {
	*x = ReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BookkeeperProtocol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRequest) ProtoMessage() {}

func (x *ReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_BookkeeperProtocol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRequest.ProtoReflect.Descriptor instead.
func (*ReadRequest) Descriptor() ([]byte, []int) {
	return file_BookkeeperProtocol_proto_rawDescGZIP(), []int{3}
}

func (x *ReadRequest) GetFlag() ReadRequest_Flag {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return ReadRequest_FENCE_LEDGER
}

func (x *ReadRequest) GetLedgerId() int64 {
	if x != nil && x.LedgerId != nil {
		return *x.LedgerId
	}
	return 0
}

func (x *ReadRequest) GetEntryId() int64 {
	if x != nil && x.EntryId != nil {
		return *x.EntryId
	}
	return 0
}

func (x *ReadRequest) GetMasterKey() []byte {
	if x != nil {
		return x.MasterKey
	}
	return nil
}

func (x *ReadRequest) GetPreviousLAC() int64 {
	if x != nil && x.PreviousLAC != nil {
		return *x.PreviousLAC
	}
	return 0
}

func (x *ReadRequest) GetTimeOut() int64 {
	if x != nil && x.TimeOut != nil {
		return *x.TimeOut
	}
	return 0
}

type AddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag       *AddRequest_Flag `protobuf:"varint,100,opt,name=flag,enum=AddRequest_Flag" json:"flag,omitempty"`
	LedgerId   *int64           `protobuf:"varint,1,req,name=ledgerId" json:"ledgerId,omitempty"`
	EntryId    *int64           `protobuf:"varint,2,req,name=entryId" json:"entryId,omitempty"`
	MasterKey  []byte           `protobuf:"bytes,3,req,name=masterKey" json:"masterKey,omitempty"`
	Body       []byte           `protobuf:"bytes,4,req,name=body" json:"body,omitempty"`
	WriteFlags *int32           `protobuf:"varint,5,opt,name=writeFlags" json:"writeFlags,omitempty"`
}

func (x *AddRequest) Reset() {
	*x = AddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BookkeeperProtocol_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRequest) ProtoMessage() {}

func (x *AddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_BookkeeperProtocol_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRequest.ProtoReflect.Descriptor instead.
func (*AddRequest) Descriptor() ([]byte, []int) {
	return file_BookkeeperProtocol_proto_rawDescGZIP(), []int{4}
}

func (x *AddRequest) GetFlag() AddRequest_Flag {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return AddRequest_RECOVERY_ADD
}

func (x *AddRequest) GetLedgerId() int64 {
	if x != nil && x.LedgerId != nil {
		return *x.LedgerId
	}
	return 0
}

func (x *AddRequest) GetEntryId() int64 {
	if x != nil && x.EntryId != nil {
		return *x.EntryId
	}
	return 0
}

func (x *AddRequest) GetMasterKey() []byte {
	if x != nil {
		return x.MasterKey
	}
	return nil
}

func (x *AddRequest) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *AddRequest) GetWriteFlags() int32 {
	if x != nil && x.WriteFlags != nil {
		return *x.WriteFlags
	}
	return 0
}

type StartTLSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartTLSRequest) Reset() {
	*x = StartTLSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BookkeeperProtocol_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTLSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTLSRequest) ProtoMessage() {}

func (x *StartTLSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_BookkeeperProtocol_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTLSRequest.ProtoReflect.Descriptor instead.
func (*StartTLSRequest) Descriptor() ([]byte, []int) {
	return file_BookkeeperProtocol_proto_rawDescGZIP(), []int{5}
}

type WriteLacRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LedgerId  *int64 `protobuf:"varint,1,req,name=ledgerId" json:"ledgerId,omitempty"`
	Lac       *int64 `protobuf:"varint,2,req,name=lac" json:"lac,omitempty"`
	MasterKey []byte `protobuf:"bytes,3,req,name=masterKey" json:"masterKey,omitempty"`
	Body      []byte `protobuf:"bytes,4,req,name=body" json:"body,omitempty"`
}

func (x *WriteLacRequest) Reset() {
	*x = WriteLacRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BookkeeperProtocol_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteLacRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteLacRequest) ProtoMessage() {}

func (x *WriteLacRequest) ProtoReflect() protoreflect.Message {
	mi := &file_BookkeeperProtocol_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteLacRequest.ProtoReflect.Descriptor instead.
func (*WriteLacRequest) Descriptor() ([]byte, []int) {
	return file_BookkeeperProtocol_proto_rawDescGZIP(), []int{6}
}

func (x *WriteLacRequest) GetLedgerId() int64 {
	if x != nil && x.LedgerId != nil {
		return *x.LedgerId
	}
	return 0
}

func (x *WriteLacRequest) GetLac() int64 {
	if x != nil && x.Lac != nil {
		return *x.Lac
	}
	return 0
}

func (x *WriteLacRequest) GetMasterKey() []byte {
	if x != nil {
		return x.MasterKey
	}
	return nil
}

func (x *WriteLacRequest) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type ForceLedgerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LedgerId *int64 `protobuf:"varint,1,req,name=ledgerId" json:"ledgerId,omitempty"`
}

func (x *ForceLedgerRequest) Reset() {
	*x = ForceLedgerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BookkeeperProtocol_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceLedgerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceLedgerRequest) ProtoMessage() {}

func (x *ForceLedgerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_BookkeeperProtocol_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceLedgerRequest.ProtoReflect.Descriptor instead.
func (*ForceLedgerRequest) Descriptor() ([]byte, []int) {
	return file_BookkeeperProtocol_proto_rawDescGZIP(), []int{7}
}

func (x *ForceLedgerRequest) GetLedgerId() int64 {
	if x != nil && x.LedgerId != nil {
		return *x.LedgerId
	}
	return 0
}

type ReadLacRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LedgerId *int64 `protobuf:"varint,1,req,name=ledgerId" json:"ledgerId,omitempty"`
}

func (x *ReadLacRequest) Reset() {
	*x = ReadLacRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BookkeeperProtocol_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadLacRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadLacRequest) ProtoMessage() {}

func (x *ReadLacRequest) ProtoReflect() protoreflect.Message {
	mi := &file_BookkeeperProtocol_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadLacRequest.ProtoReflect.Descriptor instead.
func (*ReadLacRequest) Descriptor() ([]byte, []int) {
	return file_BookkeeperProtocol_proto_rawDescGZIP(), []int{8}
}

func (x *ReadLacRequest) GetLedgerId() int64 {
	if x != nil && x.LedgerId != nil {
		return *x.LedgerId
	}
	return 0
}

type GetBookieInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bitwise OR of Flags
	Requested *int64 `protobuf:"varint,1,opt,name=requested" json:"requested,omitempty"`
}

func (x *GetBookieInfoRequest) Reset() {
	*x = GetBookieInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BookkeeperProtocol_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBookieInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBookieInfoRequest) ProtoMessage() {}

func (x *GetBookieInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_BookkeeperProtocol_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBookieInfoRequest.ProtoReflect.Descriptor instead.
func (*GetBookieInfoRequest) Descriptor() ([]byte, []int) {
	return file_BookkeeperProtocol_proto_rawDescGZIP(), []int{9}
}

func (x *GetBookieInfoRequest) GetRequested() int64 {
	if x != nil && x.Requested != nil {
		return *x.Requested
	}
	return 0
}

type GetListOfEntriesOfLedgerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LedgerId *int64 `protobuf:"varint,1,req,name=ledgerId" json:"ledgerId,omitempty"`
}

func (x *GetListOfEntriesOfLedgerRequest) Reset() {
	*x = GetListOfEntriesOfLedgerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BookkeeperProtocol_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListOfEntriesOfLedgerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListOfEntriesOfLedgerRequest) ProtoMessage() {}

func (x *GetListOfEntriesOfLedgerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_BookkeeperProtocol_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListOfEntriesOfLedgerRequest.ProtoReflect.Descriptor instead.
func (*GetListOfEntriesOfLedgerRequest) Descriptor() ([]byte, []int) {
	return file_BookkeeperProtocol_proto_rawDescGZIP(), []int{10}
}

func (x *GetListOfEntriesOfLedgerRequest) GetLedgerId() int64 {
	if x != nil && x.LedgerId != nil {
		return *x.LedgerId
	}
	return 0
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *BKPacketHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	// EOK if the underlying request succeeded. Each individual response
	// has a more meaningful status. EBADREQ if we have an unsupported request.
	Status *StatusCode `protobuf:"varint,2,req,name=status,enum=StatusCode" json:"status,omitempty"`
	// Response
	ReadResponse                     *ReadResponse                     `protobuf:"bytes,100,opt,name=readResponse" json:"readResponse,omitempty"`
	AddResponse                      *AddResponse                      `protobuf:"bytes,101,opt,name=addResponse" json:"addResponse,omitempty"`
	AuthResponse                     *AuthMessage                      `protobuf:"bytes,102,opt,name=authResponse" json:"authResponse,omitempty"`
	WriteLacResponse                 *WriteLacResponse                 `protobuf:"bytes,103,opt,name=writeLacResponse" json:"writeLacResponse,omitempty"`
	ReadLacResponse                  *ReadLacResponse                  `protobuf:"bytes,104,opt,name=readLacResponse" json:"readLacResponse,omitempty"`
	GetBookieInfoResponse            *GetBookieInfoResponse            `protobuf:"bytes,105,opt,name=getBookieInfoResponse" json:"getBookieInfoResponse,omitempty"`
	StartTLSResponse                 *StartTLSResponse                 `protobuf:"bytes,106,opt,name=startTLSResponse" json:"startTLSResponse,omitempty"`
	ForceLedgerResponse              *ForceLedgerResponse              `protobuf:"bytes,107,opt,name=forceLedgerResponse" json:"forceLedgerResponse,omitempty"`
	GetListOfEntriesOfLedgerResponse *GetListOfEntriesOfLedgerResponse `protobuf:"bytes,108,opt,name=getListOfEntriesOfLedgerResponse" json:"getListOfEntriesOfLedgerResponse,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BookkeeperProtocol_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_BookkeeperProtocol_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_BookkeeperProtocol_proto_rawDescGZIP(), []int{11}
}

func (x *Response) GetHeader() *BKPacketHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Response) GetStatus() StatusCode {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return StatusCode_EOK
}

func (x *Response) GetReadResponse() *ReadResponse {
	if x != nil {
		return x.ReadResponse
	}
	return nil
}

func (x *Response) GetAddResponse() *AddResponse {
	if x != nil {
		return x.AddResponse
	}
	return nil
}

func (x *Response) GetAuthResponse() *AuthMessage {
	if x != nil {
		return x.AuthResponse
	}
	return nil
}

func (x *Response) GetWriteLacResponse() *WriteLacResponse {
	if x != nil {
		return x.WriteLacResponse
	}
	return nil
}

func (x *Response) GetReadLacResponse() *ReadLacResponse {
	if x != nil {
		return x.ReadLacResponse
	}
	return nil
}

func (x *Response) GetGetBookieInfoResponse() *GetBookieInfoResponse {
	if x != nil {
		return x.GetBookieInfoResponse
	}
	return nil
}

func (x *Response) GetStartTLSResponse() *StartTLSResponse {
	if x != nil {
		return x.StartTLSResponse
	}
	return nil
}

func (x *Response) GetForceLedgerResponse() *ForceLedgerResponse {
	if x != nil {
		return x.ForceLedgerResponse
	}
	return nil
}

func (x *Response) GetGetListOfEntriesOfLedgerResponse() *GetListOfEntriesOfLedgerResponse {
	if x != nil {
		return x.GetListOfEntriesOfLedgerResponse
	}
	return nil
}

type ReadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *StatusCode `protobuf:"varint,1,req,name=status,enum=StatusCode" json:"status,omitempty"`
	LedgerId *int64      `protobuf:"varint,2,req,name=ledgerId" json:"ledgerId,omitempty"`
	EntryId  *int64      `protobuf:"varint,3,req,name=entryId" json:"entryId,omitempty"`
	Body     []byte      `protobuf:"bytes,4,opt,name=body" json:"body,omitempty"`
	// Piggyback LAC
	MaxLAC             *int64 `protobuf:"varint,5,opt,name=maxLAC" json:"maxLAC,omitempty"`
	LacUpdateTimestamp *int64 `protobuf:"varint,6,opt,name=lacUpdateTimestamp" json:"lacUpdateTimestamp,omitempty"`
}

func (x *ReadResponse) Reset() {
	*x = ReadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BookkeeperProtocol_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResponse) ProtoMessage() {}

func (x *ReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_BookkeeperProtocol_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResponse.ProtoReflect.Descriptor instead.
func (*ReadResponse) Descriptor() ([]byte, []int) {
	return file_BookkeeperProtocol_proto_rawDescGZIP(), []int{12}
}

func (x *ReadResponse) GetStatus() StatusCode {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return StatusCode_EOK
}

func (x *ReadResponse) GetLedgerId() int64 {
	if x != nil && x.LedgerId != nil {
		return *x.LedgerId
	}
	return 0
}

func (x *ReadResponse) GetEntryId() int64 {
	if x != nil && x.EntryId != nil {
		return *x.EntryId
	}
	return 0
}

func (x *ReadResponse) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *ReadResponse) GetMaxLAC() int64 {
	if x != nil && x.MaxLAC != nil {
		return *x.MaxLAC
	}
	return 0
}

func (x *ReadResponse) GetLacUpdateTimestamp() int64 {
	if x != nil && x.LacUpdateTimestamp != nil {
		return *x.LacUpdateTimestamp
	}
	return 0
}

type AddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *StatusCode `protobuf:"varint,1,req,name=status,enum=StatusCode" json:"status,omitempty"`
	LedgerId *int64      `protobuf:"varint,2,req,name=ledgerId" json:"ledgerId,omitempty"`
	EntryId  *int64      `protobuf:"varint,3,req,name=entryId" json:"entryId,omitempty"`
}

func (x *AddResponse) Reset() {
	*x = AddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BookkeeperProtocol_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddResponse) ProtoMessage() {}

func (x *AddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_BookkeeperProtocol_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddResponse.ProtoReflect.Descriptor instead.
func (*AddResponse) Descriptor() ([]byte, []int) {
	return file_BookkeeperProtocol_proto_rawDescGZIP(), []int{13}
}

func (x *AddResponse) GetStatus() StatusCode {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return StatusCode_EOK
}

func (x *AddResponse) GetLedgerId() int64 {
	if x != nil && x.LedgerId != nil {
		return *x.LedgerId
	}
	return 0
}

func (x *AddResponse) GetEntryId() int64 {
	if x != nil && x.EntryId != nil {
		return *x.EntryId
	}
	return 0
}

type AuthMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthPluginName *string `protobuf:"bytes,1,req,name=authPluginName" json:"authPluginName,omitempty"`
	Payload        []byte  `protobuf:"bytes,2,req,name=payload" json:"payload,omitempty"`
}

func (x *AuthMessage) Reset() {
	*x = AuthMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BookkeeperProtocol_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthMessage) ProtoMessage() {}

func (x *AuthMessage) ProtoReflect() protoreflect.Message {
	mi := &file_BookkeeperProtocol_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthMessage.ProtoReflect.Descriptor instead.
func (*AuthMessage) Descriptor() ([]byte, []int) {
	return file_BookkeeperProtocol_proto_rawDescGZIP(), []int{14}
}

func (x *AuthMessage) GetAuthPluginName() string {
	if x != nil && x.AuthPluginName != nil {
		return *x.AuthPluginName
	}
	return ""
}

func (x *AuthMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type WriteLacResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *StatusCode `protobuf:"varint,1,req,name=status,enum=StatusCode" json:"status,omitempty"`
	LedgerId *int64      `protobuf:"varint,2,req,name=ledgerId" json:"ledgerId,omitempty"`
}

func (x *WriteLacResponse) Reset() {
	*x = WriteLacResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BookkeeperProtocol_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteLacResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteLacResponse) ProtoMessage() {}

func (x *WriteLacResponse) ProtoReflect() protoreflect.Message {
	mi := &file_BookkeeperProtocol_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteLacResponse.ProtoReflect.Descriptor instead.
func (*WriteLacResponse) Descriptor() ([]byte, []int) {
	return file_BookkeeperProtocol_proto_rawDescGZIP(), []int{15}
}

func (x *WriteLacResponse) GetStatus() StatusCode {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return StatusCode_EOK
}

func (x *WriteLacResponse) GetLedgerId() int64 {
	if x != nil && x.LedgerId != nil {
		return *x.LedgerId
	}
	return 0
}

type ForceLedgerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *StatusCode `protobuf:"varint,1,req,name=status,enum=StatusCode" json:"status,omitempty"`
	LedgerId *int64      `protobuf:"varint,2,req,name=ledgerId" json:"ledgerId,omitempty"`
}

func (x *ForceLedgerResponse) Reset() {
	*x = ForceLedgerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BookkeeperProtocol_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceLedgerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceLedgerResponse) ProtoMessage() {}

func (x *ForceLedgerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_BookkeeperProtocol_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceLedgerResponse.ProtoReflect.Descriptor instead.
func (*ForceLedgerResponse) Descriptor() ([]byte, []int) {
	return file_BookkeeperProtocol_proto_rawDescGZIP(), []int{16}
}

func (x *ForceLedgerResponse) GetStatus() StatusCode {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return StatusCode_EOK
}

func (x *ForceLedgerResponse) GetLedgerId() int64 {
	if x != nil && x.LedgerId != nil {
		return *x.LedgerId
	}
	return 0
}

type ReadLacResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *StatusCode `protobuf:"varint,1,req,name=status,enum=StatusCode" json:"status,omitempty"`
	LedgerId      *int64      `protobuf:"varint,2,req,name=ledgerId" json:"ledgerId,omitempty"`
	LacBody       []byte      `protobuf:"bytes,3,opt,name=lacBody" json:"lacBody,omitempty"`             // lac sent by PutLacRequest
	LastEntryBody []byte      `protobuf:"bytes,4,opt,name=lastEntryBody" json:"lastEntryBody,omitempty"` // Actual last entry on the disk
}

func (x *ReadLacResponse) Reset() {
	*x = ReadLacResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BookkeeperProtocol_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadLacResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadLacResponse) ProtoMessage() {}

func (x *ReadLacResponse) ProtoReflect() protoreflect.Message {
	mi := &file_BookkeeperProtocol_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadLacResponse.ProtoReflect.Descriptor instead.
func (*ReadLacResponse) Descriptor() ([]byte, []int) {
	return file_BookkeeperProtocol_proto_rawDescGZIP(), []int{17}
}

func (x *ReadLacResponse) GetStatus() StatusCode {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return StatusCode_EOK
}

func (x *ReadLacResponse) GetLedgerId() int64 {
	if x != nil && x.LedgerId != nil {
		return *x.LedgerId
	}
	return 0
}

func (x *ReadLacResponse) GetLacBody() []byte {
	if x != nil {
		return x.LacBody
	}
	return nil
}

func (x *ReadLacResponse) GetLastEntryBody() []byte {
	if x != nil {
		return x.LastEntryBody
	}
	return nil
}

type GetBookieInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            *StatusCode `protobuf:"varint,1,req,name=status,enum=StatusCode" json:"status,omitempty"`
	TotalDiskCapacity *int64      `protobuf:"varint,2,opt,name=totalDiskCapacity" json:"totalDiskCapacity,omitempty"`
	FreeDiskSpace     *int64      `protobuf:"varint,3,opt,name=freeDiskSpace" json:"freeDiskSpace,omitempty"`
}

func (x *GetBookieInfoResponse) Reset() {
	*x = GetBookieInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BookkeeperProtocol_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBookieInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBookieInfoResponse) ProtoMessage() {}

func (x *GetBookieInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_BookkeeperProtocol_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBookieInfoResponse.ProtoReflect.Descriptor instead.
func (*GetBookieInfoResponse) Descriptor() ([]byte, []int) {
	return file_BookkeeperProtocol_proto_rawDescGZIP(), []int{18}
}

func (x *GetBookieInfoResponse) GetStatus() StatusCode {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return StatusCode_EOK
}

func (x *GetBookieInfoResponse) GetTotalDiskCapacity() int64 {
	if x != nil && x.TotalDiskCapacity != nil {
		return *x.TotalDiskCapacity
	}
	return 0
}

func (x *GetBookieInfoResponse) GetFreeDiskSpace() int64 {
	if x != nil && x.FreeDiskSpace != nil {
		return *x.FreeDiskSpace
	}
	return 0
}

type GetListOfEntriesOfLedgerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                        *StatusCode `protobuf:"varint,1,req,name=status,enum=StatusCode" json:"status,omitempty"`
	LedgerId                      *int64      `protobuf:"varint,2,req,name=ledgerId" json:"ledgerId,omitempty"`
	AvailabilityOfEntriesOfLedger []byte      `protobuf:"bytes,3,opt,name=availabilityOfEntriesOfLedger" json:"availabilityOfEntriesOfLedger,omitempty"` // condensed encoded format representing availability of entries of ledger
}

func (x *GetListOfEntriesOfLedgerResponse) Reset() {
	*x = GetListOfEntriesOfLedgerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BookkeeperProtocol_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListOfEntriesOfLedgerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListOfEntriesOfLedgerResponse) ProtoMessage() {}

func (x *GetListOfEntriesOfLedgerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_BookkeeperProtocol_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListOfEntriesOfLedgerResponse.ProtoReflect.Descriptor instead.
func (*GetListOfEntriesOfLedgerResponse) Descriptor() ([]byte, []int) {
	return file_BookkeeperProtocol_proto_rawDescGZIP(), []int{19}
}

func (x *GetListOfEntriesOfLedgerResponse) GetStatus() StatusCode {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return StatusCode_EOK
}

func (x *GetListOfEntriesOfLedgerResponse) GetLedgerId() int64 {
	if x != nil && x.LedgerId != nil {
		return *x.LedgerId
	}
	return 0
}

func (x *GetListOfEntriesOfLedgerResponse) GetAvailabilityOfEntriesOfLedger() []byte {
	if x != nil {
		return x.AvailabilityOfEntriesOfLedger
	}
	return nil
}

type StartTLSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartTLSResponse) Reset() {
	*x = StartTLSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BookkeeperProtocol_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTLSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTLSResponse) ProtoMessage() {}

func (x *StartTLSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_BookkeeperProtocol_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTLSResponse.ProtoReflect.Descriptor instead.
func (*StartTLSResponse) Descriptor() ([]byte, []int) {
	return file_BookkeeperProtocol_proto_rawDescGZIP(), []int{20}
}

var File_BookkeeperProtocol_proto protoreflect.FileDescriptor

var file_BookkeeperProtocol_proto_rawDesc = []byte{
	0x0a, 0x18, 0x42, 0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x01, 0x0a, 0x0e, 0x42,
	0x4b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x78, 0x6e, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x05, 0x74, 0x78, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x35, 0x0a, 0x0b,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xa3, 0x05, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x42, 0x4b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4c, 0x61,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4c, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4c, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x4c, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x64,
	0x4c, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x14, 0x67, 0x65,
	0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x14, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x4c,
	0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x4c, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x4c, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x43, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x12, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x1f, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x4f, 0x66, 0x4c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x4f, 0x66, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x1f, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x4f, 0x66, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0xc8, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xf3, 0x01, 0x0a, 0x0b, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x08, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x4c, 0x41, 0x43, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x4c, 0x41, 0x43, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x75,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74,
	0x22, 0x2d, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x45, 0x4e, 0x43,
	0x45, 0x5f, 0x4c, 0x45, 0x44, 0x47, 0x45, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x50, 0x49, 0x47, 0x47, 0x59, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x02, 0x22,
	0xd4, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x04,
	0x66, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x09, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x18, 0x0a, 0x04,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x41, 0x44, 0x44, 0x10, 0x01, 0x22, 0x11, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x4c, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x71, 0x0a, 0x0f, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x4c, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x63, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x03, 0x6c, 0x61, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x09, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x30, 0x0a, 0x12,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2c,
	0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x08, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x22, 0x35, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x54,
	0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x43, 0x49,
	0x54, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x44, 0x49, 0x53,
	0x4b, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x02, 0x22, 0x3d, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x4f, 0x66, 0x4c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0xac, 0x05, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x42, 0x4b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0b,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x10, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x4c, 0x61, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4c, 0x61, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x10, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4c, 0x61, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x4c,
	0x61, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x61, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x61, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x69, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x15, 0x67, 0x65, 0x74, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3d, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x4c, 0x53, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x4c, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x10,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x4c, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x13, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x20, 0x67, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x4f, 0x66, 0x4c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x6c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x4f, 0x66, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x20, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x4f, 0x66, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x08, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x4c, 0x41,
	0x43, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x4c, 0x41, 0x43, 0x12,
	0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6c, 0x61, 0x63,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x68, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0b,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x0b, 0x41, 0x75, 0x74,
	0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x53, 0x0a, 0x10, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x4c, 0x61, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0b,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x56, 0x0a, 0x13, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64,
	0x4c, 0x61, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x08, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x61, 0x63, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6c,
	0x61, 0x63, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x90, 0x01, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x6b, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73,
	0x6b, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x65,
	0x65, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22,
	0xa9, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x4f, 0x66, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x1d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x4f, 0x66,
	0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1d, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x4f, 0x66, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x22, 0x12, 0x0a, 0x10, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x4c, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a,
	0x46, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x4e,
	0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x57, 0x4f, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x48, 0x52, 0x45, 0x45, 0x10, 0x03, 0x2a, 0xb7, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4f, 0x4b, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x09, 0x45, 0x4e, 0x4f, 0x4c, 0x45, 0x44, 0x47, 0x45, 0x52, 0x10, 0x92, 0x03, 0x12,
	0x0d, 0x0a, 0x08, 0x45, 0x4e, 0x4f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x93, 0x03, 0x12, 0x0c,
	0x0a, 0x07, 0x45, 0x42, 0x41, 0x44, 0x52, 0x45, 0x51, 0x10, 0x94, 0x03, 0x12, 0x08, 0x0a, 0x03,
	0x45, 0x49, 0x4f, 0x10, 0xf5, 0x03, 0x12, 0x08, 0x0a, 0x03, 0x45, 0x55, 0x41, 0x10, 0xf6, 0x03,
	0x12, 0x10, 0x0a, 0x0b, 0x45, 0x42, 0x41, 0x44, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0xf7, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x45, 0x46, 0x45, 0x4e, 0x43, 0x45, 0x44, 0x10, 0xf8, 0x03,
	0x12, 0x0e, 0x0a, 0x09, 0x45, 0x52, 0x45, 0x41, 0x44, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0xf9, 0x03,
	0x12, 0x15, 0x0a, 0x10, 0x45, 0x54, 0x4f, 0x4f, 0x4d, 0x41, 0x4e, 0x59, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x53, 0x10, 0xfa, 0x03, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x4c, 0x45, 0x44, 0x47, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0xfb,
	0x03, 0x2a, 0xd9, 0x01, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52,
	0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x44, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x04, 0x12, 0x08, 0x0a,
	0x04, 0x41, 0x55, 0x54, 0x48, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x52, 0x49, 0x54, 0x45,
	0x5f, 0x4c, 0x41, 0x43, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4c,
	0x41, 0x43, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4f, 0x4f, 0x4b,
	0x49, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x5f, 0x54, 0x4c, 0x53, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x4f, 0x52, 0x43,
	0x45, 0x5f, 0x4c, 0x45, 0x44, 0x47, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x21, 0x0a, 0x1d, 0x47, 0x45,
	0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x49, 0x45,
	0x53, 0x5f, 0x4f, 0x46, 0x5f, 0x4c, 0x45, 0x44, 0x47, 0x45, 0x52, 0x10, 0x0b, 0x42, 0x26, 0x0a,
	0x1b, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x6f, 0x6f, 0x6b,
	0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x01, 0x5a, 0x05,
	0x2e, 0x2f, 0x3b, 0x70, 0x62,
}

var (
	file_BookkeeperProtocol_proto_rawDescOnce sync.Once
	file_BookkeeperProtocol_proto_rawDescData = file_BookkeeperProtocol_proto_rawDesc
)

func file_BookkeeperProtocol_proto_rawDescGZIP() []byte {
	file_BookkeeperProtocol_proto_rawDescOnce.Do(func() {
		file_BookkeeperProtocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_BookkeeperProtocol_proto_rawDescData)
	})
	return file_BookkeeperProtocol_proto_rawDescData
}

var file_BookkeeperProtocol_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_BookkeeperProtocol_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_BookkeeperProtocol_proto_goTypes = []interface{}{
	(ProtocolVersion)(0),                     // 0: ProtocolVersion
	(StatusCode)(0),                          // 1: StatusCode
	(OperationType)(0),                       // 2: OperationType
	(ReadRequest_Flag)(0),                    // 3: ReadRequest.Flag
	(AddRequest_Flag)(0),                     // 4: AddRequest.Flag
	(GetBookieInfoRequest_Flags)(0),          // 5: GetBookieInfoRequest.Flags
	(*BKPacketHeader)(nil),                   // 6: BKPacketHeader
	(*ContextPair)(nil),                      // 7: ContextPair
	(*Request)(nil),                          // 8: Request
	(*ReadRequest)(nil),                      // 9: ReadRequest
	(*AddRequest)(nil),                       // 10: AddRequest
	(*StartTLSRequest)(nil),                  // 11: StartTLSRequest
	(*WriteLacRequest)(nil),                  // 12: WriteLacRequest
	(*ForceLedgerRequest)(nil),               // 13: ForceLedgerRequest
	(*ReadLacRequest)(nil),                   // 14: ReadLacRequest
	(*GetBookieInfoRequest)(nil),             // 15: GetBookieInfoRequest
	(*GetListOfEntriesOfLedgerRequest)(nil),  // 16: GetListOfEntriesOfLedgerRequest
	(*Response)(nil),                         // 17: Response
	(*ReadResponse)(nil),                     // 18: ReadResponse
	(*AddResponse)(nil),                      // 19: AddResponse
	(*AuthMessage)(nil),                      // 20: AuthMessage
	(*WriteLacResponse)(nil),                 // 21: WriteLacResponse
	(*ForceLedgerResponse)(nil),              // 22: ForceLedgerResponse
	(*ReadLacResponse)(nil),                  // 23: ReadLacResponse
	(*GetBookieInfoResponse)(nil),            // 24: GetBookieInfoResponse
	(*GetListOfEntriesOfLedgerResponse)(nil), // 25: GetListOfEntriesOfLedgerResponse
	(*StartTLSResponse)(nil),                 // 26: StartTLSResponse
}
var file_BookkeeperProtocol_proto_depIdxs = []int32{
	0,  // 0: BKPacketHeader.version:type_name -> ProtocolVersion
	2,  // 1: BKPacketHeader.operation:type_name -> OperationType
	6,  // 2: Request.header:type_name -> BKPacketHeader
	9,  // 3: Request.readRequest:type_name -> ReadRequest
	10, // 4: Request.addRequest:type_name -> AddRequest
	20, // 5: Request.authRequest:type_name -> AuthMessage
	12, // 6: Request.writeLacRequest:type_name -> WriteLacRequest
	14, // 7: Request.readLacRequest:type_name -> ReadLacRequest
	15, // 8: Request.getBookieInfoRequest:type_name -> GetBookieInfoRequest
	11, // 9: Request.startTLSRequest:type_name -> StartTLSRequest
	13, // 10: Request.forceLedgerRequest:type_name -> ForceLedgerRequest
	16, // 11: Request.getListOfEntriesOfLedgerRequest:type_name -> GetListOfEntriesOfLedgerRequest
	7,  // 12: Request.requestContext:type_name -> ContextPair
	3,  // 13: ReadRequest.flag:type_name -> ReadRequest.Flag
	4,  // 14: AddRequest.flag:type_name -> AddRequest.Flag
	6,  // 15: Response.header:type_name -> BKPacketHeader
	1,  // 16: Response.status:type_name -> StatusCode
	18, // 17: Response.readResponse:type_name -> ReadResponse
	19, // 18: Response.addResponse:type_name -> AddResponse
	20, // 19: Response.authResponse:type_name -> AuthMessage
	21, // 20: Response.writeLacResponse:type_name -> WriteLacResponse
	23, // 21: Response.readLacResponse:type_name -> ReadLacResponse
	24, // 22: Response.getBookieInfoResponse:type_name -> GetBookieInfoResponse
	26, // 23: Response.startTLSResponse:type_name -> StartTLSResponse
	22, // 24: Response.forceLedgerResponse:type_name -> ForceLedgerResponse
	25, // 25: Response.getListOfEntriesOfLedgerResponse:type_name -> GetListOfEntriesOfLedgerResponse
	1,  // 26: ReadResponse.status:type_name -> StatusCode
	1,  // 27: AddResponse.status:type_name -> StatusCode
	1,  // 28: WriteLacResponse.status:type_name -> StatusCode
	1,  // 29: ForceLedgerResponse.status:type_name -> StatusCode
	1,  // 30: ReadLacResponse.status:type_name -> StatusCode
	1,  // 31: GetBookieInfoResponse.status:type_name -> StatusCode
	1,  // 32: GetListOfEntriesOfLedgerResponse.status:type_name -> StatusCode
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_BookkeeperProtocol_proto_init() }
func file_BookkeeperProtocol_proto_init() {
	if File_BookkeeperProtocol_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_BookkeeperProtocol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BKPacketHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BookkeeperProtocol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BookkeeperProtocol_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BookkeeperProtocol_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BookkeeperProtocol_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BookkeeperProtocol_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTLSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BookkeeperProtocol_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteLacRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BookkeeperProtocol_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceLedgerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BookkeeperProtocol_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadLacRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BookkeeperProtocol_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBookieInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BookkeeperProtocol_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListOfEntriesOfLedgerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BookkeeperProtocol_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BookkeeperProtocol_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BookkeeperProtocol_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BookkeeperProtocol_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BookkeeperProtocol_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteLacResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BookkeeperProtocol_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceLedgerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BookkeeperProtocol_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadLacResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BookkeeperProtocol_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBookieInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BookkeeperProtocol_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListOfEntriesOfLedgerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BookkeeperProtocol_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTLSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_BookkeeperProtocol_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_BookkeeperProtocol_proto_goTypes,
		DependencyIndexes: file_BookkeeperProtocol_proto_depIdxs,
		EnumInfos:         file_BookkeeperProtocol_proto_enumTypes,
		MessageInfos:      file_BookkeeperProtocol_proto_msgTypes,
	}.Build()
	File_BookkeeperProtocol_proto = out.File
	file_BookkeeperProtocol_proto_rawDesc = nil
	file_BookkeeperProtocol_proto_goTypes = nil
	file_BookkeeperProtocol_proto_depIdxs = nil
}
